// Generated by gencpp from file px_uav_msgs/UAVSetup.msg
// DO NOT EDIT!


#ifndef PX_UAV_MSGS_MESSAGE_UAVSETUP_H
#define PX_UAV_MSGS_MESSAGE_UAVSETUP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace px_uav_msgs
{
template <class ContainerAllocator>
struct UAVSetup_
{
  typedef UAVSetup_<ContainerAllocator> Type;

  UAVSetup_()
    : header()
    , cmd(0)
    , arming(false)
    , px4_mode()
    , control_state()  {
    }
  UAVSetup_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cmd(0)
    , arming(false)
    , px4_mode(_alloc)
    , control_state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _cmd_type;
  _cmd_type cmd;

   typedef uint8_t _arming_type;
  _arming_type arming;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _px4_mode_type;
  _px4_mode_type px4_mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _control_state_type;
  _control_state_type control_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ARMING)
  #undef ARMING
#endif
#if defined(_WIN32) && defined(SET_PX4_MODE)
  #undef SET_PX4_MODE
#endif
#if defined(_WIN32) && defined(REBOOT_PX4)
  #undef REBOOT_PX4
#endif
#if defined(_WIN32) && defined(SET_CONTROL_MODE)
  #undef SET_CONTROL_MODE
#endif

  enum {
    ARMING = 0u,
    SET_PX4_MODE = 1u,
    REBOOT_PX4 = 2u,
    SET_CONTROL_MODE = 3u,
  };


  typedef boost::shared_ptr< ::px_uav_msgs::UAVSetup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px_uav_msgs::UAVSetup_<ContainerAllocator> const> ConstPtr;

}; // struct UAVSetup_

typedef ::px_uav_msgs::UAVSetup_<std::allocator<void> > UAVSetup;

typedef boost::shared_ptr< ::px_uav_msgs::UAVSetup > UAVSetupPtr;
typedef boost::shared_ptr< ::px_uav_msgs::UAVSetup const> UAVSetupConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px_uav_msgs::UAVSetup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px_uav_msgs::UAVSetup_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px_uav_msgs::UAVSetup_<ContainerAllocator1> & lhs, const ::px_uav_msgs::UAVSetup_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cmd == rhs.cmd &&
    lhs.arming == rhs.arming &&
    lhs.px4_mode == rhs.px4_mode &&
    lhs.control_state == rhs.control_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px_uav_msgs::UAVSetup_<ContainerAllocator1> & lhs, const ::px_uav_msgs::UAVSetup_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::UAVSetup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::UAVSetup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::UAVSetup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::UAVSetup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::UAVSetup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::UAVSetup_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px_uav_msgs::UAVSetup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "393031ce25ae40233f2be809a2db33df";
  }

  static const char* value(const ::px_uav_msgs::UAVSetup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x393031ce25ae4023ULL;
  static const uint64_t static_value2 = 0x3f2be809a2db33dfULL;
};

template<class ContainerAllocator>
struct DataType< ::px_uav_msgs::UAVSetup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px_uav_msgs/UAVSetup";
  }

  static const char* value(const ::px_uav_msgs::UAVSetup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px_uav_msgs::UAVSetup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 无人机Setup类型（可用于模拟遥控器）\n"
"uint8 cmd\n"
"uint8 ARMING = 0\n"
"uint8 SET_PX4_MODE = 1\n"
"uint8 REBOOT_PX4 = 2\n"
"uint8 SET_CONTROL_MODE = 3\n"
"\n"
"bool arming\n"
"\n"
"## PX4模式名查询:http://wiki.ros.org/mavros/CustomModes\n"
"## 常用模式名:OFFBOARD,AUTO.LAND,AUTO.RTL,POSCTL\n"
"string px4_mode\n"
"\n"
"## INIT,MANUAL_CONTROL,HOVER_CONTROL,COMMAND_CONTROL,LAND_CONTROL\n"
"string control_state\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::px_uav_msgs::UAVSetup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px_uav_msgs::UAVSetup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cmd);
      stream.next(m.arming);
      stream.next(m.px4_mode);
      stream.next(m.control_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UAVSetup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px_uav_msgs::UAVSetup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px_uav_msgs::UAVSetup_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "arming: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arming);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "px4_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.px4_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "control_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.control_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX_UAV_MSGS_MESSAGE_UAVSETUP_H
