// Generated by gencpp from file px_uav_msgs/MultiUAVState.msg
// DO NOT EDIT!


#ifndef PX_UAV_MSGS_MESSAGE_MULTIUAVSTATE_H
#define PX_UAV_MSGS_MESSAGE_MULTIUAVSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <px_uav_msgs/UAVState.h>

namespace px_uav_msgs
{
template <class ContainerAllocator>
struct MultiUAVState_
{
  typedef MultiUAVState_<ContainerAllocator> Type;

  MultiUAVState_()
    : header()
    , uav_num(0)
    , uav_state_all()  {
    }
  MultiUAVState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uav_num(0)
    , uav_state_all(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _uav_num_type;
  _uav_num_type uav_num;

   typedef std::vector< ::px_uav_msgs::UAVState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::px_uav_msgs::UAVState_<ContainerAllocator> >> _uav_state_all_type;
  _uav_state_all_type uav_state_all;





  typedef boost::shared_ptr< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> const> ConstPtr;

}; // struct MultiUAVState_

typedef ::px_uav_msgs::MultiUAVState_<std::allocator<void> > MultiUAVState;

typedef boost::shared_ptr< ::px_uav_msgs::MultiUAVState > MultiUAVStatePtr;
typedef boost::shared_ptr< ::px_uav_msgs::MultiUAVState const> MultiUAVStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px_uav_msgs::MultiUAVState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px_uav_msgs::MultiUAVState_<ContainerAllocator1> & lhs, const ::px_uav_msgs::MultiUAVState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.uav_num == rhs.uav_num &&
    lhs.uav_state_all == rhs.uav_state_all;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px_uav_msgs::MultiUAVState_<ContainerAllocator1> & lhs, const ::px_uav_msgs::MultiUAVState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f2bf2c3c9dbefe7ad718a574ea8c6ee";
  }

  static const char* value(const ::px_uav_msgs::MultiUAVState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f2bf2c3c9dbefe7ULL;
  static const uint64_t static_value2 = 0xad718a574ea8c6eeULL;
};

template<class ContainerAllocator>
struct DataType< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px_uav_msgs/MultiUAVState";
  }

  static const char* value(const ::px_uav_msgs::MultiUAVState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## \n"
"int32 uav_num\n"
"\n"
"## 从1开始\n"
"UAVState[] uav_state_all\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: px_uav_msgs/UAVState\n"
"std_msgs/Header header\n"
"\n"
"## 无人机编号 \n"
"uint8 uav_id\n"
"\n"
"## 机载电脑是否连接上飞控，true已连接，false则不是\n"
"bool connected\n"
"## 是否解锁，true为已解锁，false则不是\n"
"bool armed\n"
"## PX4飞控当前飞行模式  int8\n"
"string mode\n"
"## 无人机定位来源\n"
"uint8 location_source\n"
"## 定位来源枚举\n"
"uint8 MOCAP=0\n"
"uint8 T265=1\n"
"uint8 GAZEBO=2\n"
"uint8 FAKE_ODOM=3\n"
"uint8 GPS = 4\n"
"uint8 RTK = 5\n"
"uint8 UWB = 6\n"
"uint8 VINS = 7\n"
"uint8 OPTICAL_FLOW = 8\n"
"uint8 viobot = 9\n"
"uint8 MID360 = 10\n"
"uint8 BSA_SLAM=11\n"
"uint8 ProSim = 12\n"
"## odom标志位\n"
"bool odom_valid\n"
"\n"
"## GPS状态,变量对应状态可参考mavros_msgs/GPSRAW中的fix_type\n"
"uint8 gps_status\n"
"## GPS状态枚举\n"
"uint8 GPS_FIX_TYPE_NO_GPS=0\n"
"uint8 GPS_FIX_TYPE_NO_FIX=1\n"
"uint8 GPS_FIX_TYPE_2D_FIX=2\n"
"uint8 GPS_FIX_TYPE_3D_FIX=3\n"
"uint8 GPS_FIX_TYPE_DGPS=4\n"
"uint8 GPS_FIX_TYPE_RTK_FLOATR=5\n"
"uint8 GPS_FIX_TYPE_RTK_FIXEDR=6\n"
"uint8 GPS_FIX_TYPE_STATIC=7\n"
"uint8 GPS_FIX_TYPE_PPP=8\n"
"## GPS卫星数量\n"
"uint8 gps_num\n"
"\n"
"## 无人机位置、速度、姿态\n"
"float32[3] position                 ## [m]\n"
"## 无人机定高雷达                     ## [m]\n"
"float32  range\n"
"## 无人机经度、纬度、高度\n"
"float32 latitude                       \n"
"float32 longitude\n"
"float32 altitude\n"
"float32 rel_alt\n"
"## 无人机速度、姿态\n"
"float32[3] velocity                 ## [m/s]\n"
"## 无人机姿态（欧拉角、四元数）\n"
"float32[3] attitude                 ## [rad]\n"
"geometry_msgs/Quaternion attitude_q ## 四元数\n"
"## 无人机姿态角速度\n"
"float32[3] attitude_rate            ## [rad/s]\n"
"## 无人机电池状态\n"
"float32 battery_state               ## [V]\n"
"float32 battery_percetage           ## [0-1]\n"
"\n"
"\n"
"\n"
"\n"
"    \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::px_uav_msgs::MultiUAVState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uav_num);
      stream.next(m.uav_state_all);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiUAVState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px_uav_msgs::MultiUAVState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px_uav_msgs::MultiUAVState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "uav_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.uav_num);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "uav_state_all: ";
    if (v.uav_state_all.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.uav_state_all.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::px_uav_msgs::UAVState_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.uav_state_all[i]);
    }
    if (v.uav_state_all.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX_UAV_MSGS_MESSAGE_MULTIUAVSTATE_H
