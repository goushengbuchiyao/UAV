// Generated by gencpp from file px_uav_msgs/UAVState.msg
// DO NOT EDIT!


#ifndef PX_UAV_MSGS_MESSAGE_UAVSTATE_H
#define PX_UAV_MSGS_MESSAGE_UAVSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>

namespace px_uav_msgs
{
template <class ContainerAllocator>
struct UAVState_
{
  typedef UAVState_<ContainerAllocator> Type;

  UAVState_()
    : header()
    , uav_id(0)
    , connected(false)
    , armed(false)
    , mode()
    , location_source(0)
    , odom_valid(false)
    , gps_status(0)
    , gps_num(0)
    , position()
    , range(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , rel_alt(0.0)
    , velocity()
    , attitude()
    , attitude_q()
    , attitude_rate()
    , battery_state(0.0)
    , battery_percetage(0.0)  {
      position.assign(0.0);

      velocity.assign(0.0);

      attitude.assign(0.0);

      attitude_rate.assign(0.0);
  }
  UAVState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uav_id(0)
    , connected(false)
    , armed(false)
    , mode(_alloc)
    , location_source(0)
    , odom_valid(false)
    , gps_status(0)
    , gps_num(0)
    , position()
    , range(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , rel_alt(0.0)
    , velocity()
    , attitude()
    , attitude_q(_alloc)
    , attitude_rate()
    , battery_state(0.0)
    , battery_percetage(0.0)  {
  (void)_alloc;
      position.assign(0.0);

      velocity.assign(0.0);

      attitude.assign(0.0);

      attitude_rate.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _uav_id_type;
  _uav_id_type uav_id;

   typedef uint8_t _connected_type;
  _connected_type connected;

   typedef uint8_t _armed_type;
  _armed_type armed;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_type;
  _mode_type mode;

   typedef uint8_t _location_source_type;
  _location_source_type location_source;

   typedef uint8_t _odom_valid_type;
  _odom_valid_type odom_valid;

   typedef uint8_t _gps_status_type;
  _gps_status_type gps_status;

   typedef uint8_t _gps_num_type;
  _gps_num_type gps_num;

   typedef boost::array<float, 3>  _position_type;
  _position_type position;

   typedef float _range_type;
  _range_type range;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef float _rel_alt_type;
  _rel_alt_type rel_alt;

   typedef boost::array<float, 3>  _velocity_type;
  _velocity_type velocity;

   typedef boost::array<float, 3>  _attitude_type;
  _attitude_type attitude;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _attitude_q_type;
  _attitude_q_type attitude_q;

   typedef boost::array<float, 3>  _attitude_rate_type;
  _attitude_rate_type attitude_rate;

   typedef float _battery_state_type;
  _battery_state_type battery_state;

   typedef float _battery_percetage_type;
  _battery_percetage_type battery_percetage;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MOCAP)
  #undef MOCAP
#endif
#if defined(_WIN32) && defined(T265)
  #undef T265
#endif
#if defined(_WIN32) && defined(GAZEBO)
  #undef GAZEBO
#endif
#if defined(_WIN32) && defined(FAKE_ODOM)
  #undef FAKE_ODOM
#endif
#if defined(_WIN32) && defined(GPS)
  #undef GPS
#endif
#if defined(_WIN32) && defined(RTK)
  #undef RTK
#endif
#if defined(_WIN32) && defined(UWB)
  #undef UWB
#endif
#if defined(_WIN32) && defined(VINS)
  #undef VINS
#endif
#if defined(_WIN32) && defined(OPTICAL_FLOW)
  #undef OPTICAL_FLOW
#endif
#if defined(_WIN32) && defined(viobot)
  #undef viobot
#endif
#if defined(_WIN32) && defined(MID360)
  #undef MID360
#endif
#if defined(_WIN32) && defined(BSA_SLAM)
  #undef BSA_SLAM
#endif
#if defined(_WIN32) && defined(ProSim)
  #undef ProSim
#endif
#if defined(_WIN32) && defined(GPS_FIX_TYPE_NO_GPS)
  #undef GPS_FIX_TYPE_NO_GPS
#endif
#if defined(_WIN32) && defined(GPS_FIX_TYPE_NO_FIX)
  #undef GPS_FIX_TYPE_NO_FIX
#endif
#if defined(_WIN32) && defined(GPS_FIX_TYPE_2D_FIX)
  #undef GPS_FIX_TYPE_2D_FIX
#endif
#if defined(_WIN32) && defined(GPS_FIX_TYPE_3D_FIX)
  #undef GPS_FIX_TYPE_3D_FIX
#endif
#if defined(_WIN32) && defined(GPS_FIX_TYPE_DGPS)
  #undef GPS_FIX_TYPE_DGPS
#endif
#if defined(_WIN32) && defined(GPS_FIX_TYPE_RTK_FLOATR)
  #undef GPS_FIX_TYPE_RTK_FLOATR
#endif
#if defined(_WIN32) && defined(GPS_FIX_TYPE_RTK_FIXEDR)
  #undef GPS_FIX_TYPE_RTK_FIXEDR
#endif
#if defined(_WIN32) && defined(GPS_FIX_TYPE_STATIC)
  #undef GPS_FIX_TYPE_STATIC
#endif
#if defined(_WIN32) && defined(GPS_FIX_TYPE_PPP)
  #undef GPS_FIX_TYPE_PPP
#endif

  enum {
    MOCAP = 0u,
    T265 = 1u,
    GAZEBO = 2u,
    FAKE_ODOM = 3u,
    GPS = 4u,
    RTK = 5u,
    UWB = 6u,
    VINS = 7u,
    OPTICAL_FLOW = 8u,
    viobot = 9u,
    MID360 = 10u,
    BSA_SLAM = 11u,
    ProSim = 12u,
    GPS_FIX_TYPE_NO_GPS = 0u,
    GPS_FIX_TYPE_NO_FIX = 1u,
    GPS_FIX_TYPE_2D_FIX = 2u,
    GPS_FIX_TYPE_3D_FIX = 3u,
    GPS_FIX_TYPE_DGPS = 4u,
    GPS_FIX_TYPE_RTK_FLOATR = 5u,
    GPS_FIX_TYPE_RTK_FIXEDR = 6u,
    GPS_FIX_TYPE_STATIC = 7u,
    GPS_FIX_TYPE_PPP = 8u,
  };


  typedef boost::shared_ptr< ::px_uav_msgs::UAVState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px_uav_msgs::UAVState_<ContainerAllocator> const> ConstPtr;

}; // struct UAVState_

typedef ::px_uav_msgs::UAVState_<std::allocator<void> > UAVState;

typedef boost::shared_ptr< ::px_uav_msgs::UAVState > UAVStatePtr;
typedef boost::shared_ptr< ::px_uav_msgs::UAVState const> UAVStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px_uav_msgs::UAVState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px_uav_msgs::UAVState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px_uav_msgs::UAVState_<ContainerAllocator1> & lhs, const ::px_uav_msgs::UAVState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.uav_id == rhs.uav_id &&
    lhs.connected == rhs.connected &&
    lhs.armed == rhs.armed &&
    lhs.mode == rhs.mode &&
    lhs.location_source == rhs.location_source &&
    lhs.odom_valid == rhs.odom_valid &&
    lhs.gps_status == rhs.gps_status &&
    lhs.gps_num == rhs.gps_num &&
    lhs.position == rhs.position &&
    lhs.range == rhs.range &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.rel_alt == rhs.rel_alt &&
    lhs.velocity == rhs.velocity &&
    lhs.attitude == rhs.attitude &&
    lhs.attitude_q == rhs.attitude_q &&
    lhs.attitude_rate == rhs.attitude_rate &&
    lhs.battery_state == rhs.battery_state &&
    lhs.battery_percetage == rhs.battery_percetage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px_uav_msgs::UAVState_<ContainerAllocator1> & lhs, const ::px_uav_msgs::UAVState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::UAVState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::UAVState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::UAVState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::UAVState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::UAVState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::UAVState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px_uav_msgs::UAVState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61e95e9b6634e22769af5718eecfc53c";
  }

  static const char* value(const ::px_uav_msgs::UAVState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61e95e9b6634e227ULL;
  static const uint64_t static_value2 = 0x69af5718eecfc53cULL;
};

template<class ContainerAllocator>
struct DataType< ::px_uav_msgs::UAVState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px_uav_msgs/UAVState";
  }

  static const char* value(const ::px_uav_msgs::UAVState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px_uav_msgs::UAVState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 无人机编号 \n"
"uint8 uav_id\n"
"\n"
"## 机载电脑是否连接上飞控，true已连接，false则不是\n"
"bool connected\n"
"## 是否解锁，true为已解锁，false则不是\n"
"bool armed\n"
"## PX4飞控当前飞行模式  int8\n"
"string mode\n"
"## 无人机定位来源\n"
"uint8 location_source\n"
"## 定位来源枚举\n"
"uint8 MOCAP=0\n"
"uint8 T265=1\n"
"uint8 GAZEBO=2\n"
"uint8 FAKE_ODOM=3\n"
"uint8 GPS = 4\n"
"uint8 RTK = 5\n"
"uint8 UWB = 6\n"
"uint8 VINS = 7\n"
"uint8 OPTICAL_FLOW = 8\n"
"uint8 viobot = 9\n"
"uint8 MID360 = 10\n"
"uint8 BSA_SLAM=11\n"
"uint8 ProSim = 12\n"
"## odom标志位\n"
"bool odom_valid\n"
"\n"
"## GPS状态,变量对应状态可参考mavros_msgs/GPSRAW中的fix_type\n"
"uint8 gps_status\n"
"## GPS状态枚举\n"
"uint8 GPS_FIX_TYPE_NO_GPS=0\n"
"uint8 GPS_FIX_TYPE_NO_FIX=1\n"
"uint8 GPS_FIX_TYPE_2D_FIX=2\n"
"uint8 GPS_FIX_TYPE_3D_FIX=3\n"
"uint8 GPS_FIX_TYPE_DGPS=4\n"
"uint8 GPS_FIX_TYPE_RTK_FLOATR=5\n"
"uint8 GPS_FIX_TYPE_RTK_FIXEDR=6\n"
"uint8 GPS_FIX_TYPE_STATIC=7\n"
"uint8 GPS_FIX_TYPE_PPP=8\n"
"## GPS卫星数量\n"
"uint8 gps_num\n"
"\n"
"## 无人机位置、速度、姿态\n"
"float32[3] position                 ## [m]\n"
"## 无人机定高雷达                     ## [m]\n"
"float32  range\n"
"## 无人机经度、纬度、高度\n"
"float32 latitude                       \n"
"float32 longitude\n"
"float32 altitude\n"
"float32 rel_alt\n"
"## 无人机速度、姿态\n"
"float32[3] velocity                 ## [m/s]\n"
"## 无人机姿态（欧拉角、四元数）\n"
"float32[3] attitude                 ## [rad]\n"
"geometry_msgs/Quaternion attitude_q ## 四元数\n"
"## 无人机姿态角速度\n"
"float32[3] attitude_rate            ## [rad/s]\n"
"## 无人机电池状态\n"
"float32 battery_state               ## [V]\n"
"float32 battery_percetage           ## [0-1]\n"
"\n"
"\n"
"\n"
"\n"
"    \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::px_uav_msgs::UAVState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px_uav_msgs::UAVState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uav_id);
      stream.next(m.connected);
      stream.next(m.armed);
      stream.next(m.mode);
      stream.next(m.location_source);
      stream.next(m.odom_valid);
      stream.next(m.gps_status);
      stream.next(m.gps_num);
      stream.next(m.position);
      stream.next(m.range);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.rel_alt);
      stream.next(m.velocity);
      stream.next(m.attitude);
      stream.next(m.attitude_q);
      stream.next(m.attitude_rate);
      stream.next(m.battery_state);
      stream.next(m.battery_percetage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UAVState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px_uav_msgs::UAVState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px_uav_msgs::UAVState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "uav_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uav_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connected);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "location_source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.location_source);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "odom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.odom_valid);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gps_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gps_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_num);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "position: ";
    if (v.position.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.position[i]);
    }
    if (v.position.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rel_alt: ";
    Printer<float>::stream(s, indent + "  ", v.rel_alt);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "velocity: ";
    if (v.velocity.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.velocity[i]);
    }
    if (v.velocity.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "attitude: ";
    if (v.attitude.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.attitude.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.attitude[i]);
    }
    if (v.attitude.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "attitude_q: ";
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude_q);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "attitude_rate: ";
    if (v.attitude_rate.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.attitude_rate.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.attitude_rate[i]);
    }
    if (v.attitude_rate.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "battery_state: ";
    Printer<float>::stream(s, indent + "  ", v.battery_state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "battery_percetage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_percetage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX_UAV_MSGS_MESSAGE_UAVSTATE_H
