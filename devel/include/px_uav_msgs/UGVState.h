// Generated by gencpp from file px_uav_msgs/UGVState.msg
// DO NOT EDIT!


#ifndef PX_UAV_MSGS_MESSAGE_UGVSTATE_H
#define PX_UAV_MSGS_MESSAGE_UGVSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>

namespace px_uav_msgs
{
template <class ContainerAllocator>
struct UGVState_
{
  typedef UGVState_<ContainerAllocator> Type;

  UGVState_()
    : header()
    , ugv_id(0)
    , battery(0.0)
    , position()
    , velocity()
    , attitude()
    , attitude_q()  {
      position.assign(0.0);

      velocity.assign(0.0);

      attitude.assign(0.0);
  }
  UGVState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ugv_id(0)
    , battery(0.0)
    , position()
    , velocity()
    , attitude()
    , attitude_q(_alloc)  {
  (void)_alloc;
      position.assign(0.0);

      velocity.assign(0.0);

      attitude.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _ugv_id_type;
  _ugv_id_type ugv_id;

   typedef float _battery_type;
  _battery_type battery;

   typedef boost::array<float, 3>  _position_type;
  _position_type position;

   typedef boost::array<float, 3>  _velocity_type;
  _velocity_type velocity;

   typedef boost::array<float, 3>  _attitude_type;
  _attitude_type attitude;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _attitude_q_type;
  _attitude_q_type attitude_q;





  typedef boost::shared_ptr< ::px_uav_msgs::UGVState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px_uav_msgs::UGVState_<ContainerAllocator> const> ConstPtr;

}; // struct UGVState_

typedef ::px_uav_msgs::UGVState_<std::allocator<void> > UGVState;

typedef boost::shared_ptr< ::px_uav_msgs::UGVState > UGVStatePtr;
typedef boost::shared_ptr< ::px_uav_msgs::UGVState const> UGVStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px_uav_msgs::UGVState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px_uav_msgs::UGVState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px_uav_msgs::UGVState_<ContainerAllocator1> & lhs, const ::px_uav_msgs::UGVState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ugv_id == rhs.ugv_id &&
    lhs.battery == rhs.battery &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.attitude == rhs.attitude &&
    lhs.attitude_q == rhs.attitude_q;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px_uav_msgs::UGVState_<ContainerAllocator1> & lhs, const ::px_uav_msgs::UGVState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::UGVState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::UGVState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::UGVState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::UGVState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::UGVState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::UGVState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px_uav_msgs::UGVState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "790323ff3cd7dc5c43acd173be873d02";
  }

  static const char* value(const ::px_uav_msgs::UGVState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x790323ff3cd7dc5cULL;
  static const uint64_t static_value2 = 0x43acd173be873d02ULL;
};

template<class ContainerAllocator>
struct DataType< ::px_uav_msgs::UGVState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px_uav_msgs/UGVState";
  }

  static const char* value(const ::px_uav_msgs::UGVState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px_uav_msgs::UGVState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 无人机编号\n"
"uint8 ugv_id\n"
"\n"
"## 电池电量\n"
"float32 battery\n"
"\n"
"## 无人机状态量：位置、速度、姿态\n"
"float32[3] position                 ## [m]\n"
"float32[3] velocity                 ## [m/s]\n"
"float32[3] attitude                 ## [rad]\n"
"\n"
"geometry_msgs/Quaternion attitude_q ## 四元数\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::px_uav_msgs::UGVState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px_uav_msgs::UGVState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ugv_id);
      stream.next(m.battery);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.attitude);
      stream.next(m.attitude_q);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UGVState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px_uav_msgs::UGVState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px_uav_msgs::UGVState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ugv_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ugv_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "position: ";
    if (v.position.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.position[i]);
    }
    if (v.position.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "velocity: ";
    if (v.velocity.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.velocity[i]);
    }
    if (v.velocity.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "attitude: ";
    if (v.attitude.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.attitude.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.attitude[i]);
    }
    if (v.attitude.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "attitude_q: ";
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude_q);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX_UAV_MSGS_MESSAGE_UGVSTATE_H
