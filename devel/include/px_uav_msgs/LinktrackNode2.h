// Generated by gencpp from file px_uav_msgs/LinktrackNode2.msg
// DO NOT EDIT!


#ifndef PX_UAV_MSGS_MESSAGE_LINKTRACKNODE2_H
#define PX_UAV_MSGS_MESSAGE_LINKTRACKNODE2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace px_uav_msgs
{
template <class ContainerAllocator>
struct LinktrackNode2_
{
  typedef LinktrackNode2_<ContainerAllocator> Type;

  LinktrackNode2_()
    : role(0)
    , id(0)
    , dis(0.0)
    , fp_rssi(0.0)
    , rx_rssi(0.0)  {
    }
  LinktrackNode2_(const ContainerAllocator& _alloc)
    : role(0)
    , id(0)
    , dis(0.0)
    , fp_rssi(0.0)
    , rx_rssi(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _role_type;
  _role_type role;

   typedef uint8_t _id_type;
  _id_type id;

   typedef float _dis_type;
  _dis_type dis;

   typedef float _fp_rssi_type;
  _fp_rssi_type fp_rssi;

   typedef float _rx_rssi_type;
  _rx_rssi_type rx_rssi;





  typedef boost::shared_ptr< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> const> ConstPtr;

}; // struct LinktrackNode2_

typedef ::px_uav_msgs::LinktrackNode2_<std::allocator<void> > LinktrackNode2;

typedef boost::shared_ptr< ::px_uav_msgs::LinktrackNode2 > LinktrackNode2Ptr;
typedef boost::shared_ptr< ::px_uav_msgs::LinktrackNode2 const> LinktrackNode2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px_uav_msgs::LinktrackNode2_<ContainerAllocator1> & lhs, const ::px_uav_msgs::LinktrackNode2_<ContainerAllocator2> & rhs)
{
  return lhs.role == rhs.role &&
    lhs.id == rhs.id &&
    lhs.dis == rhs.dis &&
    lhs.fp_rssi == rhs.fp_rssi &&
    lhs.rx_rssi == rhs.rx_rssi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px_uav_msgs::LinktrackNode2_<ContainerAllocator1> & lhs, const ::px_uav_msgs::LinktrackNode2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebc34feb8e11fb1b06d65ee49880b996";
  }

  static const char* value(const ::px_uav_msgs::LinktrackNode2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebc34feb8e11fb1bULL;
  static const uint64_t static_value2 = 0x06d65ee49880b996ULL;
};

template<class ContainerAllocator>
struct DataType< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px_uav_msgs/LinktrackNode2";
  }

  static const char* value(const ::px_uav_msgs::LinktrackNode2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 role\n"
"uint8 id\n"
"float32 dis\n"
"float32 fp_rssi\n"
"float32 rx_rssi\n"
;
  }

  static const char* value(const ::px_uav_msgs::LinktrackNode2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.role);
      stream.next(m.id);
      stream.next(m.dis);
      stream.next(m.fp_rssi);
      stream.next(m.rx_rssi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinktrackNode2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px_uav_msgs::LinktrackNode2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px_uav_msgs::LinktrackNode2_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "role: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.role);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dis: ";
    Printer<float>::stream(s, indent + "  ", v.dis);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "fp_rssi: ";
    Printer<float>::stream(s, indent + "  ", v.fp_rssi);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rx_rssi: ";
    Printer<float>::stream(s, indent + "  ", v.rx_rssi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX_UAV_MSGS_MESSAGE_LINKTRACKNODE2_H
