// Generated by gencpp from file px_uav_msgs/TextInfo.msg
// DO NOT EDIT!


#ifndef PX_UAV_MSGS_MESSAGE_TEXTINFO_H
#define PX_UAV_MSGS_MESSAGE_TEXTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace px_uav_msgs
{
template <class ContainerAllocator>
struct TextInfo_
{
  typedef TextInfo_<ContainerAllocator> Type;

  TextInfo_()
    : header()
    , MessageType(0)
    , Message()  {
    }
  TextInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , MessageType(0)
    , Message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _MessageType_type;
  _MessageType_type MessageType;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Message_type;
  _Message_type Message;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INFO)
  #undef INFO
#endif
#if defined(_WIN32) && defined(WARN)
  #undef WARN
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(FATAL)
  #undef FATAL
#endif

  enum {
    INFO = 0u,
    WARN = 1u,
    ERROR = 2u,
    FATAL = 3u,
  };


  typedef boost::shared_ptr< ::px_uav_msgs::TextInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px_uav_msgs::TextInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TextInfo_

typedef ::px_uav_msgs::TextInfo_<std::allocator<void> > TextInfo;

typedef boost::shared_ptr< ::px_uav_msgs::TextInfo > TextInfoPtr;
typedef boost::shared_ptr< ::px_uav_msgs::TextInfo const> TextInfoConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px_uav_msgs::TextInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px_uav_msgs::TextInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px_uav_msgs::TextInfo_<ContainerAllocator1> & lhs, const ::px_uav_msgs::TextInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.MessageType == rhs.MessageType &&
    lhs.Message == rhs.Message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px_uav_msgs::TextInfo_<ContainerAllocator1> & lhs, const ::px_uav_msgs::TextInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::TextInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::TextInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::TextInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::TextInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::TextInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::TextInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px_uav_msgs::TextInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c060392f27880babe5cdc68bd502409";
  }

  static const char* value(const ::px_uav_msgs::TextInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c060392f27880baULL;
  static const uint64_t static_value2 = 0xbe5cdc68bd502409ULL;
};

template<class ContainerAllocator>
struct DataType< ::px_uav_msgs::TextInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px_uav_msgs/TextInfo";
  }

  static const char* value(const ::px_uav_msgs::TextInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px_uav_msgs::TextInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#INFO:正常运行状况下反馈给地面站的信息,例如程序正常启动,状态切换的提示信息等.\n"
"uint8 INFO=0\n"
"#WARN:无人机或软件程序出现意外情况,依然能正常启动或继续执行任务,小概率会出现危险状况,例如无人机RTK无法维持退出到GPS,视觉跟踪目标突然丢失重新搜寻目标等.\n"
"uint8 WARN=1\n"
"#ERROR:无人机或软件程序出现重大意外情况,无法正常启动或继续执行任务,极有可能会出现危险状况,需要中断任务以及人为接管控制无人机,例如通信中断,无人机定位发散,ROS节点无法正常启动等.\n"
"uint8 ERROR=2\n"
"#FATAL:任务执行过程中,软件崩溃或无人机飞控崩溃导致无人机完全失控,需要迅速人为接管控制无人机降落减少炸机损失.\n"
"uint8 FATAL=3\n"
"\n"
"std_msgs/Header header\n"
"uint8 MessageType\n"
"string Message\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::px_uav_msgs::TextInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px_uav_msgs::TextInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.MessageType);
      stream.next(m.Message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TextInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px_uav_msgs::TextInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px_uav_msgs::TextInfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "MessageType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MessageType);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX_UAV_MSGS_MESSAGE_TEXTINFO_H
