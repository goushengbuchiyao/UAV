// Generated by gencpp from file px_uav_msgs/SwarmCommand.msg
// DO NOT EDIT!


#ifndef PX_UAV_MSGS_MESSAGE_SWARMCOMMAND_H
#define PX_UAV_MSGS_MESSAGE_SWARMCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace px_uav_msgs
{
template <class ContainerAllocator>
struct SwarmCommand_
{
  typedef SwarmCommand_<ContainerAllocator> Type;

  SwarmCommand_()
    : header()
    , source()
    , swarm_num(0)
    , swarm_location_source(0)
    , Swarm_CMD(0)
    , leader_pos()
    , leader_vel()
    , swarm_size(0.0)
    , swarm_shape(0)
    , target_area_x_min(0.0)
    , target_area_y_min(0.0)
    , target_area_x_max(0.0)
    , target_area_y_max(0.0)
    , attack_target_pos()
    , formation_poses()  {
      leader_pos.assign(0.0);

      leader_vel.assign(0.0);

      attack_target_pos.assign(0.0);
  }
  SwarmCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , source(_alloc)
    , swarm_num(0)
    , swarm_location_source(0)
    , Swarm_CMD(0)
    , leader_pos()
    , leader_vel()
    , swarm_size(0.0)
    , swarm_shape(0)
    , target_area_x_min(0.0)
    , target_area_y_min(0.0)
    , target_area_x_max(0.0)
    , target_area_y_max(0.0)
    , attack_target_pos()
    , formation_poses(_alloc)  {
  (void)_alloc;
      leader_pos.assign(0.0);

      leader_vel.assign(0.0);

      attack_target_pos.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _source_type;
  _source_type source;

   typedef uint8_t _swarm_num_type;
  _swarm_num_type swarm_num;

   typedef uint8_t _swarm_location_source_type;
  _swarm_location_source_type swarm_location_source;

   typedef uint8_t _Swarm_CMD_type;
  _Swarm_CMD_type Swarm_CMD;

   typedef boost::array<float, 3>  _leader_pos_type;
  _leader_pos_type leader_pos;

   typedef boost::array<float, 2>  _leader_vel_type;
  _leader_vel_type leader_vel;

   typedef float _swarm_size_type;
  _swarm_size_type swarm_size;

   typedef uint8_t _swarm_shape_type;
  _swarm_shape_type swarm_shape;

   typedef float _target_area_x_min_type;
  _target_area_x_min_type target_area_x_min;

   typedef float _target_area_y_min_type;
  _target_area_y_min_type target_area_y_min;

   typedef float _target_area_x_max_type;
  _target_area_x_max_type target_area_x_max;

   typedef float _target_area_y_max_type;
  _target_area_y_max_type target_area_y_max;

   typedef boost::array<float, 3>  _attack_target_pos_type;
  _attack_target_pos_type attack_target_pos;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _formation_poses_type;
  _formation_poses_type formation_poses;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(mocap)
  #undef mocap
#endif
#if defined(_WIN32) && defined(gps)
  #undef gps
#endif
#if defined(_WIN32) && defined(rtk)
  #undef rtk
#endif
#if defined(_WIN32) && defined(uwb)
  #undef uwb
#endif
#if defined(_WIN32) && defined(Ready)
  #undef Ready
#endif
#if defined(_WIN32) && defined(Init)
  #undef Init
#endif
#if defined(_WIN32) && defined(Start)
  #undef Start
#endif
#if defined(_WIN32) && defined(Hold)
  #undef Hold
#endif
#if defined(_WIN32) && defined(Stop)
  #undef Stop
#endif
#if defined(_WIN32) && defined(Formation)
  #undef Formation
#endif
#if defined(_WIN32) && defined(Col_Around_Circle)
  #undef Col_Around_Circle
#endif
#if defined(_WIN32) && defined(Col_Follow_UAV)
  #undef Col_Follow_UAV
#endif
#if defined(_WIN32) && defined(Col_Follow_UGV)
  #undef Col_Follow_UGV
#endif
#if defined(_WIN32) && defined(InitPlanner)
  #undef InitPlanner
#endif
#if defined(_WIN32) && defined(SwarmFormationPlanner)
  #undef SwarmFormationPlanner
#endif
#if defined(_WIN32) && defined(Follow)
  #undef Follow
#endif
#if defined(_WIN32) && defined(Search)
  #undef Search
#endif
#if defined(_WIN32) && defined(Attack)
  #undef Attack
#endif
#if defined(_WIN32) && defined(One_column)
  #undef One_column
#endif
#if defined(_WIN32) && defined(Triangle)
  #undef Triangle
#endif
#if defined(_WIN32) && defined(Square)
  #undef Square
#endif
#if defined(_WIN32) && defined(Circular)
  #undef Circular
#endif
#if defined(_WIN32) && defined(around_Circle)
  #undef around_Circle
#endif

  enum {
    mocap = 0u,
    gps = 4u,
    rtk = 5u,
    uwb = 6u,
    Ready = 0u,
    Init = 1u,
    Start = 2u,
    Hold = 3u,
    Stop = 4u,
    Formation = 5u,
    Col_Around_Circle = 6u,
    Col_Follow_UAV = 7u,
    Col_Follow_UGV = 8u,
    InitPlanner = 9u,
    SwarmFormationPlanner = 10u,
    Follow = 11u,
    Search = 12u,
    Attack = 13u,
    One_column = 0u,
    Triangle = 1u,
    Square = 2u,
    Circular = 3u,
    around_Circle = 4u,
  };


  typedef boost::shared_ptr< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SwarmCommand_

typedef ::px_uav_msgs::SwarmCommand_<std::allocator<void> > SwarmCommand;

typedef boost::shared_ptr< ::px_uav_msgs::SwarmCommand > SwarmCommandPtr;
typedef boost::shared_ptr< ::px_uav_msgs::SwarmCommand const> SwarmCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px_uav_msgs::SwarmCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px_uav_msgs::SwarmCommand_<ContainerAllocator1> & lhs, const ::px_uav_msgs::SwarmCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.source == rhs.source &&
    lhs.swarm_num == rhs.swarm_num &&
    lhs.swarm_location_source == rhs.swarm_location_source &&
    lhs.Swarm_CMD == rhs.Swarm_CMD &&
    lhs.leader_pos == rhs.leader_pos &&
    lhs.leader_vel == rhs.leader_vel &&
    lhs.swarm_size == rhs.swarm_size &&
    lhs.swarm_shape == rhs.swarm_shape &&
    lhs.target_area_x_min == rhs.target_area_x_min &&
    lhs.target_area_y_min == rhs.target_area_y_min &&
    lhs.target_area_x_max == rhs.target_area_x_max &&
    lhs.target_area_y_max == rhs.target_area_y_max &&
    lhs.attack_target_pos == rhs.attack_target_pos &&
    lhs.formation_poses == rhs.formation_poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px_uav_msgs::SwarmCommand_<ContainerAllocator1> & lhs, const ::px_uav_msgs::SwarmCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "280b61bf48e98d617871f1d573cf0c08";
  }

  static const char* value(const ::px_uav_msgs::SwarmCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x280b61bf48e98d61ULL;
  static const uint64_t static_value2 = 0x7871f1d573cf0c08ULL;
};

template<class ContainerAllocator>
struct DataType< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px_uav_msgs/SwarmCommand";
  }

  static const char* value(const ::px_uav_msgs::SwarmCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 消息来源\n"
"string source\n"
"\n"
"## 编队套件数量\n"
"uint8 swarm_num\n"
"\n"
"uint8 swarm_location_source\n"
"\n"
"# enum loc 定位来源枚举\n"
"uint8 mocap = 0\n"
"uint8 gps = 4\n"
"uint8 rtk = 5\n"
"uint8 uwb = 6\n"
"\n"
"## 命令\n"
"uint8 Swarm_CMD\n"
"# enum CMD 控制模式枚举\n"
"uint8 Ready=0\n"
"uint8 Init=1\n"
"uint8 Start=2\n"
"uint8 Hold=3\n"
"uint8 Stop=4\n"
"uint8 Formation=5\n"
"\n"
"uint8 Col_Around_Circle=6\n"
"uint8 Col_Follow_UAV=7\n"
"uint8 Col_Follow_UGV=8\n"
"\n"
"uint8 InitPlanner=9\n"
"uint8 SwarmFormationPlanner=10\n"
"\n"
"uint8 Follow=11\n"
"uint8 Search=12\n"
"uint8 Attack=13\n"
"\n"
"## 编队控制参考量 \n"
"float32[3] leader_pos\n"
"float32[2] leader_vel\n"
"float32 swarm_size\n"
"uint8 swarm_shape\n"
"uint8 One_column=0\n"
"uint8 Triangle=1\n"
"uint8 Square=2\n"
"uint8 Circular=3\n"
"uint8 around_Circle=4\n"
"\n"
"## 搜索控制参考量 \n"
"float32 target_area_x_min          ## [m]\n"
"float32 target_area_y_min          ## [m]\n"
"float32 target_area_x_max          ## [m]\n"
"float32 target_area_y_max          ## [m]\n"
"\n"
"## 攻击控制参考量 \n"
"float32[3] attack_target_pos          ## [m]\n"
"\n"
"#队形位置\n"
"geometry_msgs/Point[] formation_poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::px_uav_msgs::SwarmCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.source);
      stream.next(m.swarm_num);
      stream.next(m.swarm_location_source);
      stream.next(m.Swarm_CMD);
      stream.next(m.leader_pos);
      stream.next(m.leader_vel);
      stream.next(m.swarm_size);
      stream.next(m.swarm_shape);
      stream.next(m.target_area_x_min);
      stream.next(m.target_area_y_min);
      stream.next(m.target_area_x_max);
      stream.next(m.target_area_y_max);
      stream.next(m.attack_target_pos);
      stream.next(m.formation_poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwarmCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px_uav_msgs::SwarmCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px_uav_msgs::SwarmCommand_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.source);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "swarm_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swarm_num);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "swarm_location_source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swarm_location_source);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Swarm_CMD: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Swarm_CMD);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "leader_pos: ";
    if (v.leader_pos.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.leader_pos.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.leader_pos[i]);
    }
    if (v.leader_pos.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "leader_vel: ";
    if (v.leader_vel.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.leader_vel.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.leader_vel[i]);
    }
    if (v.leader_vel.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "swarm_size: ";
    Printer<float>::stream(s, indent + "  ", v.swarm_size);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "swarm_shape: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swarm_shape);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target_area_x_min: ";
    Printer<float>::stream(s, indent + "  ", v.target_area_x_min);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target_area_y_min: ";
    Printer<float>::stream(s, indent + "  ", v.target_area_y_min);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target_area_x_max: ";
    Printer<float>::stream(s, indent + "  ", v.target_area_x_max);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target_area_y_max: ";
    Printer<float>::stream(s, indent + "  ", v.target_area_y_max);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "attack_target_pos: ";
    if (v.attack_target_pos.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.attack_target_pos.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.attack_target_pos[i]);
    }
    if (v.attack_target_pos.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "formation_poses: ";
    if (v.formation_poses.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.formation_poses.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.formation_poses[i]);
    }
    if (v.formation_poses.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX_UAV_MSGS_MESSAGE_SWARMCOMMAND_H
