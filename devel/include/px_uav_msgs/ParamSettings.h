// Generated by gencpp from file px_uav_msgs/ParamSettings.msg
// DO NOT EDIT!


#ifndef PX_UAV_MSGS_MESSAGE_PARAMSETTINGS_H
#define PX_UAV_MSGS_MESSAGE_PARAMSETTINGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace px_uav_msgs
{
template <class ContainerAllocator>
struct ParamSettings_
{
  typedef ParamSettings_<ContainerAllocator> Type;

  ParamSettings_()
    : param_name()
    , param_value()  {
    }
  ParamSettings_(const ContainerAllocator& _alloc)
    : param_name(_alloc)
    , param_value(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _param_name_type;
  _param_name_type param_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _param_value_type;
  _param_value_type param_value;





  typedef boost::shared_ptr< ::px_uav_msgs::ParamSettings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px_uav_msgs::ParamSettings_<ContainerAllocator> const> ConstPtr;

}; // struct ParamSettings_

typedef ::px_uav_msgs::ParamSettings_<std::allocator<void> > ParamSettings;

typedef boost::shared_ptr< ::px_uav_msgs::ParamSettings > ParamSettingsPtr;
typedef boost::shared_ptr< ::px_uav_msgs::ParamSettings const> ParamSettingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px_uav_msgs::ParamSettings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px_uav_msgs::ParamSettings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px_uav_msgs::ParamSettings_<ContainerAllocator1> & lhs, const ::px_uav_msgs::ParamSettings_<ContainerAllocator2> & rhs)
{
  return lhs.param_name == rhs.param_name &&
    lhs.param_value == rhs.param_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px_uav_msgs::ParamSettings_<ContainerAllocator1> & lhs, const ::px_uav_msgs::ParamSettings_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::ParamSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::ParamSettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::ParamSettings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::ParamSettings_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::ParamSettings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::ParamSettings_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px_uav_msgs::ParamSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75157f8febd181d39db292f566f5eebb";
  }

  static const char* value(const ::px_uav_msgs::ParamSettings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75157f8febd181d3ULL;
  static const uint64_t static_value2 = 0x9db292f566f5eebbULL;
};

template<class ContainerAllocator>
struct DataType< ::px_uav_msgs::ParamSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px_uav_msgs/ParamSettings";
  }

  static const char* value(const ::px_uav_msgs::ParamSettings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px_uav_msgs::ParamSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] param_name\n"
"string[] param_value\n"
;
  }

  static const char* value(const ::px_uav_msgs::ParamSettings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px_uav_msgs::ParamSettings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.param_name);
      stream.next(m.param_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParamSettings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px_uav_msgs::ParamSettings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px_uav_msgs::ParamSettings_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "param_name: ";
    if (v.param_name.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.param_name.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.param_name[i]);
    }
    if (v.param_name.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "param_value: ";
    if (v.param_value.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.param_value.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.param_value[i]);
    }
    if (v.param_value.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX_UAV_MSGS_MESSAGE_PARAMSETTINGS_H
