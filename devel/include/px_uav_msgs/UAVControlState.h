// Generated by gencpp from file px_uav_msgs/UAVControlState.msg
// DO NOT EDIT!


#ifndef PX_UAV_MSGS_MESSAGE_UAVCONTROLSTATE_H
#define PX_UAV_MSGS_MESSAGE_UAVCONTROLSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace px_uav_msgs
{
template <class ContainerAllocator>
struct UAVControlState_
{
  typedef UAVControlState_<ContainerAllocator> Type;

  UAVControlState_()
    : header()
    , uav_id(0)
    , control_state(0)
    , pos_controller(0)
    , failsafe(false)
    , mode()
    , position()
    , velocity()
    , yaw(0.0)
    , takeoff(false)
    , land(false)
    , emergency(false)  {
    }
  UAVControlState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uav_id(0)
    , control_state(0)
    , pos_controller(0)
    , failsafe(false)
    , mode(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , yaw(0.0)
    , takeoff(false)
    , land(false)
    , emergency(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _uav_id_type;
  _uav_id_type uav_id;

   typedef uint8_t _control_state_type;
  _control_state_type control_state;

   typedef uint8_t _pos_controller_type;
  _pos_controller_type pos_controller;

   typedef uint8_t _failsafe_type;
  _failsafe_type failsafe;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_type;
  _mode_type mode;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef uint8_t _takeoff_type;
  _takeoff_type takeoff;

   typedef uint8_t _land_type;
  _land_type land;

   typedef uint8_t _emergency_type;
  _emergency_type emergency;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INIT)
  #undef INIT
#endif
#if defined(_WIN32) && defined(RC_POS_CONTROL)
  #undef RC_POS_CONTROL
#endif
#if defined(_WIN32) && defined(COMMAND_CONTROL)
  #undef COMMAND_CONTROL
#endif
#if defined(_WIN32) && defined(LAND_CONTROL)
  #undef LAND_CONTROL
#endif
#if defined(_WIN32) && defined(PX4_ORIGIN)
  #undef PX4_ORIGIN
#endif
#if defined(_WIN32) && defined(PID)
  #undef PID
#endif
#if defined(_WIN32) && defined(UDE)
  #undef UDE
#endif
#if defined(_WIN32) && defined(NE)
  #undef NE
#endif

  enum {
    INIT = 0u,
    RC_POS_CONTROL = 1u,
    COMMAND_CONTROL = 2u,
    LAND_CONTROL = 3u,
    PX4_ORIGIN = 0u,
    PID = 1u,
    UDE = 2u,
    NE = 3u,
  };


  typedef boost::shared_ptr< ::px_uav_msgs::UAVControlState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px_uav_msgs::UAVControlState_<ContainerAllocator> const> ConstPtr;

}; // struct UAVControlState_

typedef ::px_uav_msgs::UAVControlState_<std::allocator<void> > UAVControlState;

typedef boost::shared_ptr< ::px_uav_msgs::UAVControlState > UAVControlStatePtr;
typedef boost::shared_ptr< ::px_uav_msgs::UAVControlState const> UAVControlStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px_uav_msgs::UAVControlState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px_uav_msgs::UAVControlState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px_uav_msgs::UAVControlState_<ContainerAllocator1> & lhs, const ::px_uav_msgs::UAVControlState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.uav_id == rhs.uav_id &&
    lhs.control_state == rhs.control_state &&
    lhs.pos_controller == rhs.pos_controller &&
    lhs.failsafe == rhs.failsafe &&
    lhs.mode == rhs.mode &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.yaw == rhs.yaw &&
    lhs.takeoff == rhs.takeoff &&
    lhs.land == rhs.land &&
    lhs.emergency == rhs.emergency;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px_uav_msgs::UAVControlState_<ContainerAllocator1> & lhs, const ::px_uav_msgs::UAVControlState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::UAVControlState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px_uav_msgs::UAVControlState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::UAVControlState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px_uav_msgs::UAVControlState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::UAVControlState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px_uav_msgs::UAVControlState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px_uav_msgs::UAVControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e659c63b910cf2a272d26e1d4b516070";
  }

  static const char* value(const ::px_uav_msgs::UAVControlState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe659c63b910cf2a2ULL;
  static const uint64_t static_value2 = 0x72d26e1d4b516070ULL;
};

template<class ContainerAllocator>
struct DataType< ::px_uav_msgs::UAVControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px_uav_msgs/UAVControlState";
  }

  static const char* value(const ::px_uav_msgs::UAVControlState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px_uav_msgs::UAVControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 无人机编号 \n"
"uint8 uav_id\n"
"\n"
"## 无人机控制状态\n"
"uint8 control_state\n"
"## 状态枚举\n"
"uint8 INIT=0\n"
"uint8 RC_POS_CONTROL=1\n"
"uint8 COMMAND_CONTROL=2\n"
"uint8 LAND_CONTROL=3\n"
"\n"
"## 无人机控制器标志量\n"
"uint8 pos_controller\n"
"## 状态枚举\n"
"uint8 PX4_ORIGIN=0\n"
"uint8 PID=1\n"
"uint8 UDE=2\n"
"uint8 NE=3\n"
"\n"
"# 无人机安全保护触发标志量\n"
"bool failsafe\n"
"\n"
"string mode\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Vector3 velocity\n"
"float64 yaw\n"
"bool takeoff\n"
"bool land\n"
"bool emergency\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::px_uav_msgs::UAVControlState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px_uav_msgs::UAVControlState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uav_id);
      stream.next(m.control_state);
      stream.next(m.pos_controller);
      stream.next(m.failsafe);
      stream.next(m.mode);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.yaw);
      stream.next(m.takeoff);
      stream.next(m.land);
      stream.next(m.emergency);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UAVControlState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px_uav_msgs::UAVControlState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px_uav_msgs::UAVControlState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "uav_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uav_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "control_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pos_controller: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pos_controller);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "failsafe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failsafe);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "position: ";
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "velocity: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "takeoff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.takeoff);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "land: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.land);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "emergency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX_UAV_MSGS_MESSAGE_UAVCONTROLSTATE_H
