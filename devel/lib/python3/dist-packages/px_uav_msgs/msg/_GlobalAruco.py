# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from px_uav_msgs/GlobalAruco.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import px_uav_msgs.msg
import std_msgs.msg

class GlobalAruco(genpy.Message):
  _md5sum = "1ac5e7f2e18092c8685802c04fdbf69a"
  _type = "px_uav_msgs/GlobalAruco"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """
std_msgs/Header header

ArucoInfo Aruco1
ArucoInfo Aruco2
ArucoInfo Aruco3
ArucoInfo Aruco4
ArucoInfo Aruco5
ArucoInfo Aruco6
ArucoInfo Aruco7
ArucoInfo Aruco8
ArucoInfo Aruco9

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: px_uav_msgs/ArucoInfo
std_msgs/Header header

## aruco编码
int32 aruco_num

## 是否检测到目标
bool detected

## 目标位置-相机坐标系-(x,y,z)
## 从相机往前看，物体在相机右方x为正，下方y为正，前方z为正
float32[3] position

## 目标姿态-四元数-(qx,qy,qz,qw)
float32[4] orientation

## 视线角度-相机系下-(右方x角度为正,下方y角度为正)
float32[2] sight_angle
"""
  __slots__ = ['header','Aruco1','Aruco2','Aruco3','Aruco4','Aruco5','Aruco6','Aruco7','Aruco8','Aruco9']
  _slot_types = ['std_msgs/Header','px_uav_msgs/ArucoInfo','px_uav_msgs/ArucoInfo','px_uav_msgs/ArucoInfo','px_uav_msgs/ArucoInfo','px_uav_msgs/ArucoInfo','px_uav_msgs/ArucoInfo','px_uav_msgs/ArucoInfo','px_uav_msgs/ArucoInfo','px_uav_msgs/ArucoInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Aruco1,Aruco2,Aruco3,Aruco4,Aruco5,Aruco6,Aruco7,Aruco8,Aruco9

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalAruco, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Aruco1 is None:
        self.Aruco1 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco2 is None:
        self.Aruco2 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco3 is None:
        self.Aruco3 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco4 is None:
        self.Aruco4 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco5 is None:
        self.Aruco5 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco6 is None:
        self.Aruco6 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco7 is None:
        self.Aruco7 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco8 is None:
        self.Aruco8 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco9 is None:
        self.Aruco9 = px_uav_msgs.msg.ArucoInfo()
    else:
      self.header = std_msgs.msg.Header()
      self.Aruco1 = px_uav_msgs.msg.ArucoInfo()
      self.Aruco2 = px_uav_msgs.msg.ArucoInfo()
      self.Aruco3 = px_uav_msgs.msg.ArucoInfo()
      self.Aruco4 = px_uav_msgs.msg.ArucoInfo()
      self.Aruco5 = px_uav_msgs.msg.ArucoInfo()
      self.Aruco6 = px_uav_msgs.msg.ArucoInfo()
      self.Aruco7 = px_uav_msgs.msg.ArucoInfo()
      self.Aruco8 = px_uav_msgs.msg.ArucoInfo()
      self.Aruco9 = px_uav_msgs.msg.ArucoInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco1.header.seq, _x.Aruco1.header.stamp.secs, _x.Aruco1.header.stamp.nsecs))
      _x = self.Aruco1.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco1.aruco_num, _x.Aruco1.detected))
      buff.write(_get_struct_3f().pack(*self.Aruco1.position))
      buff.write(_get_struct_4f().pack(*self.Aruco1.orientation))
      buff.write(_get_struct_2f().pack(*self.Aruco1.sight_angle))
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco2.header.seq, _x.Aruco2.header.stamp.secs, _x.Aruco2.header.stamp.nsecs))
      _x = self.Aruco2.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco2.aruco_num, _x.Aruco2.detected))
      buff.write(_get_struct_3f().pack(*self.Aruco2.position))
      buff.write(_get_struct_4f().pack(*self.Aruco2.orientation))
      buff.write(_get_struct_2f().pack(*self.Aruco2.sight_angle))
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco3.header.seq, _x.Aruco3.header.stamp.secs, _x.Aruco3.header.stamp.nsecs))
      _x = self.Aruco3.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco3.aruco_num, _x.Aruco3.detected))
      buff.write(_get_struct_3f().pack(*self.Aruco3.position))
      buff.write(_get_struct_4f().pack(*self.Aruco3.orientation))
      buff.write(_get_struct_2f().pack(*self.Aruco3.sight_angle))
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco4.header.seq, _x.Aruco4.header.stamp.secs, _x.Aruco4.header.stamp.nsecs))
      _x = self.Aruco4.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco4.aruco_num, _x.Aruco4.detected))
      buff.write(_get_struct_3f().pack(*self.Aruco4.position))
      buff.write(_get_struct_4f().pack(*self.Aruco4.orientation))
      buff.write(_get_struct_2f().pack(*self.Aruco4.sight_angle))
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco5.header.seq, _x.Aruco5.header.stamp.secs, _x.Aruco5.header.stamp.nsecs))
      _x = self.Aruco5.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco5.aruco_num, _x.Aruco5.detected))
      buff.write(_get_struct_3f().pack(*self.Aruco5.position))
      buff.write(_get_struct_4f().pack(*self.Aruco5.orientation))
      buff.write(_get_struct_2f().pack(*self.Aruco5.sight_angle))
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco6.header.seq, _x.Aruco6.header.stamp.secs, _x.Aruco6.header.stamp.nsecs))
      _x = self.Aruco6.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco6.aruco_num, _x.Aruco6.detected))
      buff.write(_get_struct_3f().pack(*self.Aruco6.position))
      buff.write(_get_struct_4f().pack(*self.Aruco6.orientation))
      buff.write(_get_struct_2f().pack(*self.Aruco6.sight_angle))
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco7.header.seq, _x.Aruco7.header.stamp.secs, _x.Aruco7.header.stamp.nsecs))
      _x = self.Aruco7.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco7.aruco_num, _x.Aruco7.detected))
      buff.write(_get_struct_3f().pack(*self.Aruco7.position))
      buff.write(_get_struct_4f().pack(*self.Aruco7.orientation))
      buff.write(_get_struct_2f().pack(*self.Aruco7.sight_angle))
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco8.header.seq, _x.Aruco8.header.stamp.secs, _x.Aruco8.header.stamp.nsecs))
      _x = self.Aruco8.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco8.aruco_num, _x.Aruco8.detected))
      buff.write(_get_struct_3f().pack(*self.Aruco8.position))
      buff.write(_get_struct_4f().pack(*self.Aruco8.orientation))
      buff.write(_get_struct_2f().pack(*self.Aruco8.sight_angle))
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco9.header.seq, _x.Aruco9.header.stamp.secs, _x.Aruco9.header.stamp.nsecs))
      _x = self.Aruco9.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco9.aruco_num, _x.Aruco9.detected))
      buff.write(_get_struct_3f().pack(*self.Aruco9.position))
      buff.write(_get_struct_4f().pack(*self.Aruco9.orientation))
      buff.write(_get_struct_2f().pack(*self.Aruco9.sight_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Aruco1 is None:
        self.Aruco1 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco2 is None:
        self.Aruco2 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco3 is None:
        self.Aruco3 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco4 is None:
        self.Aruco4 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco5 is None:
        self.Aruco5 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco6 is None:
        self.Aruco6 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco7 is None:
        self.Aruco7 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco8 is None:
        self.Aruco8 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco9 is None:
        self.Aruco9 = px_uav_msgs.msg.ArucoInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.Aruco1.header.seq, _x.Aruco1.header.stamp.secs, _x.Aruco1.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco1.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco1.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco1.aruco_num, _x.Aruco1.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco1.detected = bool(self.Aruco1.detected)
      start = end
      end += 12
      self.Aruco1.position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.Aruco1.orientation = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 8
      self.Aruco1.sight_angle = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.Aruco2.header.seq, _x.Aruco2.header.stamp.secs, _x.Aruco2.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco2.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco2.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco2.aruco_num, _x.Aruco2.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco2.detected = bool(self.Aruco2.detected)
      start = end
      end += 12
      self.Aruco2.position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.Aruco2.orientation = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 8
      self.Aruco2.sight_angle = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.Aruco3.header.seq, _x.Aruco3.header.stamp.secs, _x.Aruco3.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco3.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco3.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco3.aruco_num, _x.Aruco3.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco3.detected = bool(self.Aruco3.detected)
      start = end
      end += 12
      self.Aruco3.position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.Aruco3.orientation = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 8
      self.Aruco3.sight_angle = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.Aruco4.header.seq, _x.Aruco4.header.stamp.secs, _x.Aruco4.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco4.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco4.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco4.aruco_num, _x.Aruco4.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco4.detected = bool(self.Aruco4.detected)
      start = end
      end += 12
      self.Aruco4.position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.Aruco4.orientation = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 8
      self.Aruco4.sight_angle = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.Aruco5.header.seq, _x.Aruco5.header.stamp.secs, _x.Aruco5.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco5.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco5.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco5.aruco_num, _x.Aruco5.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco5.detected = bool(self.Aruco5.detected)
      start = end
      end += 12
      self.Aruco5.position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.Aruco5.orientation = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 8
      self.Aruco5.sight_angle = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.Aruco6.header.seq, _x.Aruco6.header.stamp.secs, _x.Aruco6.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco6.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco6.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco6.aruco_num, _x.Aruco6.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco6.detected = bool(self.Aruco6.detected)
      start = end
      end += 12
      self.Aruco6.position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.Aruco6.orientation = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 8
      self.Aruco6.sight_angle = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.Aruco7.header.seq, _x.Aruco7.header.stamp.secs, _x.Aruco7.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco7.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco7.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco7.aruco_num, _x.Aruco7.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco7.detected = bool(self.Aruco7.detected)
      start = end
      end += 12
      self.Aruco7.position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.Aruco7.orientation = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 8
      self.Aruco7.sight_angle = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.Aruco8.header.seq, _x.Aruco8.header.stamp.secs, _x.Aruco8.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco8.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco8.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco8.aruco_num, _x.Aruco8.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco8.detected = bool(self.Aruco8.detected)
      start = end
      end += 12
      self.Aruco8.position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.Aruco8.orientation = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 8
      self.Aruco8.sight_angle = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.Aruco9.header.seq, _x.Aruco9.header.stamp.secs, _x.Aruco9.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco9.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco9.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco9.aruco_num, _x.Aruco9.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco9.detected = bool(self.Aruco9.detected)
      start = end
      end += 12
      self.Aruco9.position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.Aruco9.orientation = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 8
      self.Aruco9.sight_angle = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco1.header.seq, _x.Aruco1.header.stamp.secs, _x.Aruco1.header.stamp.nsecs))
      _x = self.Aruco1.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco1.aruco_num, _x.Aruco1.detected))
      buff.write(self.Aruco1.position.tostring())
      buff.write(self.Aruco1.orientation.tostring())
      buff.write(self.Aruco1.sight_angle.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco2.header.seq, _x.Aruco2.header.stamp.secs, _x.Aruco2.header.stamp.nsecs))
      _x = self.Aruco2.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco2.aruco_num, _x.Aruco2.detected))
      buff.write(self.Aruco2.position.tostring())
      buff.write(self.Aruco2.orientation.tostring())
      buff.write(self.Aruco2.sight_angle.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco3.header.seq, _x.Aruco3.header.stamp.secs, _x.Aruco3.header.stamp.nsecs))
      _x = self.Aruco3.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco3.aruco_num, _x.Aruco3.detected))
      buff.write(self.Aruco3.position.tostring())
      buff.write(self.Aruco3.orientation.tostring())
      buff.write(self.Aruco3.sight_angle.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco4.header.seq, _x.Aruco4.header.stamp.secs, _x.Aruco4.header.stamp.nsecs))
      _x = self.Aruco4.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco4.aruco_num, _x.Aruco4.detected))
      buff.write(self.Aruco4.position.tostring())
      buff.write(self.Aruco4.orientation.tostring())
      buff.write(self.Aruco4.sight_angle.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco5.header.seq, _x.Aruco5.header.stamp.secs, _x.Aruco5.header.stamp.nsecs))
      _x = self.Aruco5.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco5.aruco_num, _x.Aruco5.detected))
      buff.write(self.Aruco5.position.tostring())
      buff.write(self.Aruco5.orientation.tostring())
      buff.write(self.Aruco5.sight_angle.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco6.header.seq, _x.Aruco6.header.stamp.secs, _x.Aruco6.header.stamp.nsecs))
      _x = self.Aruco6.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco6.aruco_num, _x.Aruco6.detected))
      buff.write(self.Aruco6.position.tostring())
      buff.write(self.Aruco6.orientation.tostring())
      buff.write(self.Aruco6.sight_angle.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco7.header.seq, _x.Aruco7.header.stamp.secs, _x.Aruco7.header.stamp.nsecs))
      _x = self.Aruco7.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco7.aruco_num, _x.Aruco7.detected))
      buff.write(self.Aruco7.position.tostring())
      buff.write(self.Aruco7.orientation.tostring())
      buff.write(self.Aruco7.sight_angle.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco8.header.seq, _x.Aruco8.header.stamp.secs, _x.Aruco8.header.stamp.nsecs))
      _x = self.Aruco8.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco8.aruco_num, _x.Aruco8.detected))
      buff.write(self.Aruco8.position.tostring())
      buff.write(self.Aruco8.orientation.tostring())
      buff.write(self.Aruco8.sight_angle.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.Aruco9.header.seq, _x.Aruco9.header.stamp.secs, _x.Aruco9.header.stamp.nsecs))
      _x = self.Aruco9.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Aruco9.aruco_num, _x.Aruco9.detected))
      buff.write(self.Aruco9.position.tostring())
      buff.write(self.Aruco9.orientation.tostring())
      buff.write(self.Aruco9.sight_angle.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Aruco1 is None:
        self.Aruco1 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco2 is None:
        self.Aruco2 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco3 is None:
        self.Aruco3 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco4 is None:
        self.Aruco4 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco5 is None:
        self.Aruco5 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco6 is None:
        self.Aruco6 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco7 is None:
        self.Aruco7 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco8 is None:
        self.Aruco8 = px_uav_msgs.msg.ArucoInfo()
      if self.Aruco9 is None:
        self.Aruco9 = px_uav_msgs.msg.ArucoInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.Aruco1.header.seq, _x.Aruco1.header.stamp.secs, _x.Aruco1.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco1.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco1.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco1.aruco_num, _x.Aruco1.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco1.detected = bool(self.Aruco1.detected)
      start = end
      end += 12
      self.Aruco1.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.Aruco1.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 8
      self.Aruco1.sight_angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 12
      (_x.Aruco2.header.seq, _x.Aruco2.header.stamp.secs, _x.Aruco2.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco2.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco2.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco2.aruco_num, _x.Aruco2.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco2.detected = bool(self.Aruco2.detected)
      start = end
      end += 12
      self.Aruco2.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.Aruco2.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 8
      self.Aruco2.sight_angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 12
      (_x.Aruco3.header.seq, _x.Aruco3.header.stamp.secs, _x.Aruco3.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco3.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco3.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco3.aruco_num, _x.Aruco3.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco3.detected = bool(self.Aruco3.detected)
      start = end
      end += 12
      self.Aruco3.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.Aruco3.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 8
      self.Aruco3.sight_angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 12
      (_x.Aruco4.header.seq, _x.Aruco4.header.stamp.secs, _x.Aruco4.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco4.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco4.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco4.aruco_num, _x.Aruco4.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco4.detected = bool(self.Aruco4.detected)
      start = end
      end += 12
      self.Aruco4.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.Aruco4.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 8
      self.Aruco4.sight_angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 12
      (_x.Aruco5.header.seq, _x.Aruco5.header.stamp.secs, _x.Aruco5.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco5.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco5.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco5.aruco_num, _x.Aruco5.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco5.detected = bool(self.Aruco5.detected)
      start = end
      end += 12
      self.Aruco5.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.Aruco5.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 8
      self.Aruco5.sight_angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 12
      (_x.Aruco6.header.seq, _x.Aruco6.header.stamp.secs, _x.Aruco6.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco6.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco6.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco6.aruco_num, _x.Aruco6.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco6.detected = bool(self.Aruco6.detected)
      start = end
      end += 12
      self.Aruco6.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.Aruco6.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 8
      self.Aruco6.sight_angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 12
      (_x.Aruco7.header.seq, _x.Aruco7.header.stamp.secs, _x.Aruco7.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco7.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco7.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco7.aruco_num, _x.Aruco7.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco7.detected = bool(self.Aruco7.detected)
      start = end
      end += 12
      self.Aruco7.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.Aruco7.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 8
      self.Aruco7.sight_angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 12
      (_x.Aruco8.header.seq, _x.Aruco8.header.stamp.secs, _x.Aruco8.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco8.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco8.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco8.aruco_num, _x.Aruco8.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco8.detected = bool(self.Aruco8.detected)
      start = end
      end += 12
      self.Aruco8.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.Aruco8.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 8
      self.Aruco8.sight_angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 12
      (_x.Aruco9.header.seq, _x.Aruco9.header.stamp.secs, _x.Aruco9.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Aruco9.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Aruco9.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Aruco9.aruco_num, _x.Aruco9.detected,) = _get_struct_iB().unpack(str[start:end])
      self.Aruco9.detected = bool(self.Aruco9.detected)
      start = end
      end += 12
      self.Aruco9.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.Aruco9.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 8
      self.Aruco9.sight_angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
