# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from px_uav_msgs/SwarmCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class SwarmCommand(genpy.Message):
  _md5sum = "280b61bf48e98d617871f1d573cf0c08"
  _type = "px_uav_msgs/SwarmCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

## 消息来源
string source

## 编队套件数量
uint8 swarm_num

uint8 swarm_location_source

# enum loc 定位来源枚举
uint8 mocap = 0
uint8 gps = 4
uint8 rtk = 5
uint8 uwb = 6

## 命令
uint8 Swarm_CMD
# enum CMD 控制模式枚举
uint8 Ready=0
uint8 Init=1
uint8 Start=2
uint8 Hold=3
uint8 Stop=4
uint8 Formation=5

uint8 Col_Around_Circle=6
uint8 Col_Follow_UAV=7
uint8 Col_Follow_UGV=8

uint8 InitPlanner=9
uint8 SwarmFormationPlanner=10

uint8 Follow=11
uint8 Search=12
uint8 Attack=13

## 编队控制参考量 
float32[3] leader_pos
float32[2] leader_vel
float32 swarm_size
uint8 swarm_shape
uint8 One_column=0
uint8 Triangle=1
uint8 Square=2
uint8 Circular=3
uint8 around_Circle=4

## 搜索控制参考量 
float32 target_area_x_min          ## [m]
float32 target_area_y_min          ## [m]
float32 target_area_x_max          ## [m]
float32 target_area_y_max          ## [m]

## 攻击控制参考量 
float32[3] attack_target_pos          ## [m]

#队形位置
geometry_msgs/Point[] formation_poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  mocap = 0
  gps = 4
  rtk = 5
  uwb = 6
  Ready = 0
  Init = 1
  Start = 2
  Hold = 3
  Stop = 4
  Formation = 5
  Col_Around_Circle = 6
  Col_Follow_UAV = 7
  Col_Follow_UGV = 8
  InitPlanner = 9
  SwarmFormationPlanner = 10
  Follow = 11
  Search = 12
  Attack = 13
  One_column = 0
  Triangle = 1
  Square = 2
  Circular = 3
  around_Circle = 4

  __slots__ = ['header','source','swarm_num','swarm_location_source','Swarm_CMD','leader_pos','leader_vel','swarm_size','swarm_shape','target_area_x_min','target_area_y_min','target_area_x_max','target_area_y_max','attack_target_pos','formation_poses']
  _slot_types = ['std_msgs/Header','string','uint8','uint8','uint8','float32[3]','float32[2]','float32','uint8','float32','float32','float32','float32','float32[3]','geometry_msgs/Point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,source,swarm_num,swarm_location_source,Swarm_CMD,leader_pos,leader_vel,swarm_size,swarm_shape,target_area_x_min,target_area_y_min,target_area_x_max,target_area_y_max,attack_target_pos,formation_poses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SwarmCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.source is None:
        self.source = ''
      if self.swarm_num is None:
        self.swarm_num = 0
      if self.swarm_location_source is None:
        self.swarm_location_source = 0
      if self.Swarm_CMD is None:
        self.Swarm_CMD = 0
      if self.leader_pos is None:
        self.leader_pos = [0.] * 3
      if self.leader_vel is None:
        self.leader_vel = [0.] * 2
      if self.swarm_size is None:
        self.swarm_size = 0.
      if self.swarm_shape is None:
        self.swarm_shape = 0
      if self.target_area_x_min is None:
        self.target_area_x_min = 0.
      if self.target_area_y_min is None:
        self.target_area_y_min = 0.
      if self.target_area_x_max is None:
        self.target_area_x_max = 0.
      if self.target_area_y_max is None:
        self.target_area_y_max = 0.
      if self.attack_target_pos is None:
        self.attack_target_pos = [0.] * 3
      if self.formation_poses is None:
        self.formation_poses = []
    else:
      self.header = std_msgs.msg.Header()
      self.source = ''
      self.swarm_num = 0
      self.swarm_location_source = 0
      self.Swarm_CMD = 0
      self.leader_pos = [0.] * 3
      self.leader_vel = [0.] * 2
      self.swarm_size = 0.
      self.swarm_shape = 0
      self.target_area_x_min = 0.
      self.target_area_y_min = 0.
      self.target_area_x_max = 0.
      self.target_area_y_max = 0.
      self.attack_target_pos = [0.] * 3
      self.formation_poses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.swarm_num, _x.swarm_location_source, _x.Swarm_CMD))
      buff.write(_get_struct_3f().pack(*self.leader_pos))
      buff.write(_get_struct_2f().pack(*self.leader_vel))
      _x = self
      buff.write(_get_struct_fB4f().pack(_x.swarm_size, _x.swarm_shape, _x.target_area_x_min, _x.target_area_y_min, _x.target_area_x_max, _x.target_area_y_max))
      buff.write(_get_struct_3f().pack(*self.attack_target_pos))
      length = len(self.formation_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.formation_poses:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.formation_poses is None:
        self.formation_poses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.swarm_num, _x.swarm_location_source, _x.Swarm_CMD,) = _get_struct_3B().unpack(str[start:end])
      start = end
      end += 12
      self.leader_pos = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 8
      self.leader_vel = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 21
      (_x.swarm_size, _x.swarm_shape, _x.target_area_x_min, _x.target_area_y_min, _x.target_area_x_max, _x.target_area_y_max,) = _get_struct_fB4f().unpack(str[start:end])
      start = end
      end += 12
      self.attack_target_pos = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.formation_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.formation_poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.swarm_num, _x.swarm_location_source, _x.Swarm_CMD))
      buff.write(self.leader_pos.tostring())
      buff.write(self.leader_vel.tostring())
      _x = self
      buff.write(_get_struct_fB4f().pack(_x.swarm_size, _x.swarm_shape, _x.target_area_x_min, _x.target_area_y_min, _x.target_area_x_max, _x.target_area_y_max))
      buff.write(self.attack_target_pos.tostring())
      length = len(self.formation_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.formation_poses:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.formation_poses is None:
        self.formation_poses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.swarm_num, _x.swarm_location_source, _x.Swarm_CMD,) = _get_struct_3B().unpack(str[start:end])
      start = end
      end += 12
      self.leader_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 8
      self.leader_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 21
      (_x.swarm_size, _x.swarm_shape, _x.target_area_x_min, _x.target_area_y_min, _x.target_area_x_max, _x.target_area_y_max,) = _get_struct_fB4f().unpack(str[start:end])
      start = end
      end += 12
      self.attack_target_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.formation_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.formation_poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_fB4f = None
def _get_struct_fB4f():
    global _struct_fB4f
    if _struct_fB4f is None:
        _struct_fB4f = struct.Struct("<fB4f")
    return _struct_fB4f
