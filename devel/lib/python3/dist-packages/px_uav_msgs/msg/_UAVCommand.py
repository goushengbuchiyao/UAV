# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from px_uav_msgs/UAVCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class UAVCommand(genpy.Message):
  _md5sum = "8e2d468617a903de8fb514f495325390"
  _type = "px_uav_msgs/UAVCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

## 控制命令的模式 
uint8 Agent_CMD
# Agent_CMD 枚举
uint8 Init_Pos_Hover=1  # home点上方悬停
uint8 Current_Pos_Hover=2 # 当前位置上方悬停
uint8 Land=3
uint8 Move=4
uint8 User_Mode=5

## 控制等级 
uint8 Control_Level
# Control_Level 枚举
uint8 DEFAULT_CONTROL=0        ### 默认控制
uint8 ABSOLUTE_CONTROL=1       ### 绝对控制，在该控制等级下不在响应 默认控制 下任何指令，持续的Move模式应谨慎使用该优先级
uint8 EXIT_ABSOLUTE_CONTROL=2  ### 退出绝对控制控制，在该控制下，会响应上述两种控制的指令

## 移动命令下的子模式
uint8 Move_mode
## 移动命令下的子模式枚举
uint8 XYZ_POS = 0               ### 惯性系定点控制
uint8 XY_VEL_Z_POS = 1          ### 惯性系定高速度控制
uint8 XYZ_VEL = 2               ### 惯性系速度控制
uint8 XYZ_POS_BODY = 3          ### 机体系位置控制
uint8 XYZ_VEL_BODY = 4          ### 机体系速度控制
uint8 XY_VEL_Z_POS_BODY = 5     ### 机体系定高速度控制
uint8 TRAJECTORY = 6            ### 轨迹追踪控制
uint8 XYZ_ATT = 7               ### 姿态控制（来自外部控制器）
uint8 LAT_LON_ALT = 8           ### 绝对坐标系下的经纬度

## 控制参考量
float32[3] position_ref                ## [m]
float32[3] velocity_ref                 ## [m/s]
float32[3] acceleration_ref       ## [m/s^2]
float32 yaw_ref                             ## [rad]
bool Yaw_Rate_Mode                      ## True 代表控制偏航角速率
float32 yaw_rate_ref                  ## [rad/s]
float32[4] att_ref       ## [rad] + [0-1]
float64 latitude        ## 无人机经度、纬度、高度                 
float64 longitude       ## 无人机经度、纬度、高度
float64 altitude        ## 无人机经度、纬度、高度

## 控制命令的编号 防止接收到错误命令， 编号应该逐次递加
uint32 Command_ID

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  Init_Pos_Hover = 1
  Current_Pos_Hover = 2
  Land = 3
  Move = 4
  User_Mode = 5
  DEFAULT_CONTROL = 0
  ABSOLUTE_CONTROL = 1
  EXIT_ABSOLUTE_CONTROL = 2
  XYZ_POS = 0
  XY_VEL_Z_POS = 1
  XYZ_VEL = 2
  XYZ_POS_BODY = 3
  XYZ_VEL_BODY = 4
  XY_VEL_Z_POS_BODY = 5
  TRAJECTORY = 6
  XYZ_ATT = 7
  LAT_LON_ALT = 8

  __slots__ = ['header','Agent_CMD','Control_Level','Move_mode','position_ref','velocity_ref','acceleration_ref','yaw_ref','Yaw_Rate_Mode','yaw_rate_ref','att_ref','latitude','longitude','altitude','Command_ID']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','float32[3]','float32[3]','float32[3]','float32','bool','float32','float32[4]','float64','float64','float64','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Agent_CMD,Control_Level,Move_mode,position_ref,velocity_ref,acceleration_ref,yaw_ref,Yaw_Rate_Mode,yaw_rate_ref,att_ref,latitude,longitude,altitude,Command_ID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UAVCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Agent_CMD is None:
        self.Agent_CMD = 0
      if self.Control_Level is None:
        self.Control_Level = 0
      if self.Move_mode is None:
        self.Move_mode = 0
      if self.position_ref is None:
        self.position_ref = [0.] * 3
      if self.velocity_ref is None:
        self.velocity_ref = [0.] * 3
      if self.acceleration_ref is None:
        self.acceleration_ref = [0.] * 3
      if self.yaw_ref is None:
        self.yaw_ref = 0.
      if self.Yaw_Rate_Mode is None:
        self.Yaw_Rate_Mode = False
      if self.yaw_rate_ref is None:
        self.yaw_rate_ref = 0.
      if self.att_ref is None:
        self.att_ref = [0.] * 4
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.Command_ID is None:
        self.Command_ID = 0
    else:
      self.header = std_msgs.msg.Header()
      self.Agent_CMD = 0
      self.Control_Level = 0
      self.Move_mode = 0
      self.position_ref = [0.] * 3
      self.velocity_ref = [0.] * 3
      self.acceleration_ref = [0.] * 3
      self.yaw_ref = 0.
      self.Yaw_Rate_Mode = False
      self.yaw_rate_ref = 0.
      self.att_ref = [0.] * 4
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.Command_ID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.Agent_CMD, _x.Control_Level, _x.Move_mode))
      buff.write(_get_struct_3f().pack(*self.position_ref))
      buff.write(_get_struct_3f().pack(*self.velocity_ref))
      buff.write(_get_struct_3f().pack(*self.acceleration_ref))
      _x = self
      buff.write(_get_struct_fBf().pack(_x.yaw_ref, _x.Yaw_Rate_Mode, _x.yaw_rate_ref))
      buff.write(_get_struct_4f().pack(*self.att_ref))
      _x = self
      buff.write(_get_struct_3dI().pack(_x.latitude, _x.longitude, _x.altitude, _x.Command_ID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.Agent_CMD, _x.Control_Level, _x.Move_mode,) = _get_struct_3B().unpack(str[start:end])
      start = end
      end += 12
      self.position_ref = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.velocity_ref = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.acceleration_ref = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.yaw_ref, _x.Yaw_Rate_Mode, _x.yaw_rate_ref,) = _get_struct_fBf().unpack(str[start:end])
      self.Yaw_Rate_Mode = bool(self.Yaw_Rate_Mode)
      start = end
      end += 16
      self.att_ref = _get_struct_4f().unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.latitude, _x.longitude, _x.altitude, _x.Command_ID,) = _get_struct_3dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.Agent_CMD, _x.Control_Level, _x.Move_mode))
      buff.write(self.position_ref.tostring())
      buff.write(self.velocity_ref.tostring())
      buff.write(self.acceleration_ref.tostring())
      _x = self
      buff.write(_get_struct_fBf().pack(_x.yaw_ref, _x.Yaw_Rate_Mode, _x.yaw_rate_ref))
      buff.write(self.att_ref.tostring())
      _x = self
      buff.write(_get_struct_3dI().pack(_x.latitude, _x.longitude, _x.altitude, _x.Command_ID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.Agent_CMD, _x.Control_Level, _x.Move_mode,) = _get_struct_3B().unpack(str[start:end])
      start = end
      end += 12
      self.position_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.velocity_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.acceleration_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 9
      (_x.yaw_ref, _x.Yaw_Rate_Mode, _x.yaw_rate_ref,) = _get_struct_fBf().unpack(str[start:end])
      self.Yaw_Rate_Mode = bool(self.Yaw_Rate_Mode)
      start = end
      end += 16
      self.att_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      _x = self
      start = end
      end += 28
      (_x.latitude, _x.longitude, _x.altitude, _x.Command_ID,) = _get_struct_3dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3dI = None
def _get_struct_3dI():
    global _struct_3dI
    if _struct_3dI is None:
        _struct_3dI = struct.Struct("<3dI")
    return _struct_3dI
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_fBf = None
def _get_struct_fBf():
    global _struct_fBf
    if _struct_fBf is None:
        _struct_fBf = struct.Struct("<fBf")
    return _struct_fBf
